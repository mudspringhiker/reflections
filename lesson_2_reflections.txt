
What happens when you initialize a repository? Why do you need to do it?

	It kind of starts recording a baseline. So there will be a starting point for comparing files after commits.

How is the staging area different from the working directory and the repository? What value do you think it offers?

	It is different from the working director and the repository in that it cannot be accessed or it is not physically present? It is not a directory or a folder that one can access. It is an intermediate area.

How can you use the staging area to make sure you have one commit per logical change?

	Using git diff --staged, one can see the difference between the files in the staging area and the last commit in the repository. One can then formulate a good commit message to describe the changes made to the files in the repository and those in the staging area in case one cannot remember what changes have been made. 

	Using git diff without any arguments compares the modified (if any) unstaged files to the commited files.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
	
	Branches help when you want to do some experiment on the code while keeping a good copy intact. This can help create different versions of the code or file in an orderly and organized manner, provided the commits are saved with appropriate messages and that one is making sure the changes are made in the branch and not the master.

	Here, I have learned how to create a new branch using the 'git branch' (to know what branch I am currently in) and "'git branch 'branch name'" to create the new branch. To checkout the new branch, use "git checkout 'branch name'".

How do the diagrams help you visualize the branch struncture?

	To get the diagram, I use the command, "git log --graph --oneline master 'new branch'". This will show a diagram of the branch.

	It helped me to know where one is working on.

	Now I kind of understand wht the message I get from checking out a commit. The changes made to the checkout commit can't be seen in the history (because it is unreacheable) unless a new branch is created. To do this, use "git checkout -b new_branch_name".

	Running git gc will run Git's garbage collection which removes commits that are deleted, making some commits unreacheable.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	The result is that the changes in the branch were added into the master. 